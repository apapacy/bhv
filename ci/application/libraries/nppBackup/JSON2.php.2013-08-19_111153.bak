<?phprequire "JSON.php";class JSON2 extends Services_JSON {	var $strings;	function JSON2($use=JSON_STRICT_TYPE) {		$this->use = $use;	}	function save_strings($matches) {		$this->strings[] = $matches[0];		return '""';	}		function convert_unicode($matches) {		$utf16 = chr(hexdec($matches[1])) . chr(hexdec($matches[2]));		return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');	}		function decode($str) {		// Save the strings		$this->strings = array();		$str = preg_replace_callback('@"([^\\\\"]|\\\\\\\\|\\\\"|\\\\/|\\\\b|\\\\f|\\\\n|\\\\r|\\\\t|\\\\u)*"@',			array(&$this, 'save_strings'), $str);				// Change the JSON constructs into PHP syntax		$search = array(':', '[', ']','{','}');		$objstr = ($this->use == JSON_STRICT_TYPE) ? '(object) array(' : 'array(';		$replace = array('=>','array(',')',$objstr,')');					$str = str_replace($search, $replace, $str);				// Modify the special characters in the strings as needed		$match = array('$',  '\\/', '\\b',  '\\f');		$repl  = array('\$', '/',  '\x08', '\x0c');		$this->strings = str_replace($match, $repl, $this->strings);				// Convert Unicode characters to UTF-8		$this->strings = preg_replace_callback('@\\\\u([0-9a-f]{2})([0-9a-f]{2})@i',			array(&$this, 'convert_unicode'), $this->strings);				// Restore the strings		$str = preg_replace('@""@e', 'array_shift($this->strings)', $str);		// Use the PHP parser to convert the result string into a PHP construct				return eval('return '.$str.';');	}}?>